/*
Algorithm:

1. There are 2^N subsets for a N element set.
2. We represent each element in a set with a bit. A bit can be 0 or 1.
3. We can use this to check whether this element belongs to set or not.


Consider a set A of 3 elements.
A = {a, b, c}

Now, we need 3 bits, one bit for each element. 1 represent that the corresponding element is present in the subset, whereas 0 represent the corresponding element is not in the subset. Letâ€™s write all the possible combination of these 3 bits.

0 = (000)2 = {}
1 = (001)2 = {c}
2 = (010)2 = {b}
3 = (011)2 = {b, c}
4 = (100)2 = {a}
5 = (101)2 = {a, c}
6 = (110)2 = {a, b}
7 = (111)2 = {a, b, c}
*/


#include<bits/stdc++.h>
using namespace std;

#define fastIO ios_base::sync_with_stdio(false);cin.tie(NULL); cout.tie(NULL);
#define ll long long
const ll MOD  = 1000000007;


Time Complexity : O(N * 2^N)

void possibleSubsets(string A, int N)
{
    for(int i =0; i < pow(2, N); ++i)
    {
        for(int j =0; j < N; ++j)
        {
            if(i & (1 << j))
                cout <<A[j] <<" ";
        }
        cout<<"\n";
    }
}



int main()
{
    fastIO
    
    string s = "abc";

    possibleSubsets(s, 3);
        
	return 0;

}


